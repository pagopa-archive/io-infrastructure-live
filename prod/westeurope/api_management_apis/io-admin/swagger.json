{
  "swagger": "2.0",
  "info": {
    "title": "${display_name}",
    "version": "1.0",
    "description": "${description}"
  },
  "host": "${host}",
  "basePath": "/${path}",
  "schemes": ["https"],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "paths": {
    "/services/{service_id}": {
      "parameters": [
        {
          "name": "service_id",
          "in": "path",
          "type": "string",
          "required": true,
          "description": "The ID of an existing Service."
        }
      ],
      "get": {
        "operationId": "getService",
        "summary": "Get Service",
        "description": "A previously created service with the provided service ID is returned.",
        "responses": {
          "200": {
            "description": "Service found.",
            "schema": {
              "$ref": "#/definitions/Service"
            },
            "examples": {
              "application/json": {
                "id": "2b3e728c1a5d1efa035c-0000000000000001",
                "authorized_recipients": ["XXXYYY79A95Y000X"],
                "department_name": "dept",
                "organization_name": "org",
                "service_id": "2b3e728c1a5d1efa035c",
                "service_name": "service",
                "version": 1,
                "authorized_cidrs": []
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No service found for the provided ID."
          }
        },
        "parameters": []
      },
      "put": {
        "responses": {
          "200": {
            "description": "Service updated.",
            "schema": {
              "$ref": "#/definitions/Service"
            },
            "examples": {
              "application/json": {
                "id": "2b3e728c1a5d1efa035c-0000000000000001",
                "authorized_recipients": ["XXXYYY79A95Y000X"],
                "department_name": "dept",
                "organization_name": "org",
                "service_id": "2b3e728c1a5d1efa035c",
                "service_name": "service",
                "version": 1,
                "authorized_cidrs": []
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No service found for the provided ID."
          }
        },
        "summary": "Update Service",
        "operationId": "updateService",
        "description": "Update an existing service with the attributes provided in the\nrequest payload.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Service"
            },
            "description": "The Service payload.",
            "x-examples": {
              "application/json": {
                "authorized_recipients": ["XXXYYY79A95Y000X"],
                "department_name": "dept",
                "organization_name": "org",
                "service_id": "2b3e728c1a5d1efa035c",
                "service_name": "service",
                "authorized_cidrs": []
              }
            }
          }
        ]
      }
    },
    "/services/{service_id}/logo": {
      "parameters": [
        {
          "name": "service_id",
          "in": "path",
          "type": "string",
          "required": true,
          "description": "The ID of a existing Service."
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/Logo"
          },
          "description": "The logo payload"
        }
      ],
      "put": {
        "responses": {
          "201": {
            "description": "Logo uploaded.",
            "headers": {
              "Location": {
                "description": "Link to the uploaded logo",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Invalid payload.",
            "schema": {
              "$ref": "#/definitions/ProblemJson"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "No service found for the provided ID."
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "summary": "Upload service logo.",
        "operationId": "uploadServiceLogo"
      }
    },
    "/services": {
      "post": {
        "responses": {
          "200": {
            "description": "Service created.",
            "schema": {
              "$ref": "#/definitions/Service"
            },
            "examples": {
              "application/json": {
                "id": "2b3e728c1a5d1efa035c-0000000000000001",
                "authorized_recipients": ["XXXYYY79A95Y000X"],
                "department_name": "dept",
                "organization_name": "org",
                "service_id": "2b3e728c1a5d1efa035c",
                "service_name": "service",
                "version": 1,
                "authorized_cidrs": []
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Create Service",
        "description": "Create a new Service with the attributes provided in the requst\npayload.",
        "operationId": "createService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Service"
            },
            "description": "The Service payload.",
            "x-examples": {
              "application/json": {
                "authorized_recipients": ["XXXYYY79A95Y000X"],
                "department_name": "dept",
                "organization_name": "org",
                "service_id": "2b3e728c1a5d1efa035c",
                "service_name": "service",
                "authorized_cidrs": []
              }
            }
          }
        ]
      }
    },
    "/development-profiles/{fiscal_code}": {
      "post": {
        "tags": ["restricted"],
        "description": "Create a development profile for the user identified by the\nprovided fiscal code.",
        "operationId": "createDevelopmentProfile",
        "summary": "Create DevelopmentProfile",
        "parameters": [
          {
            "$ref": "#/parameters/SandboxFiscalCode"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DevelopmentProfile"
            },
            "x-examples": {
              "application/json": {
                "email": "foobar@example.com"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated.",
            "schema": {
              "$ref": "#/definitions/ExtendedProfile"
            },
            "examples": {
              "application/json": {
                "email": "foobar@example.com",
                "version": 0
              }
            }
          },
          "400": {
            "description": "Invalid payload.",
            "schema": {
              "$ref": "#/definitions/ProblemJson"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict.",
            "schema": {
              "$ref": "#/definitions/ProblemJson"
            }
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    }
  },
  "definitions": {
    "DevelopmentProfile": {
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/EmailAddress"
        }
      },
      "required": ["email"]
    },
    "EmailAddress": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/EmailAddress"
    },
    "ProblemJson": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/ProblemJson"
    },
    "Service": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/Service"
    },
    "ServiceMetadata": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/ServiceMetadata"
    },
    "ServiceId": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/ServiceId"
    },
    "ServiceName": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/ServiceName"
    },
    "OrganizationName": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/OrganizationName"
    },
    "DepartmentName": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/DepartmentName"
    },
    "CIDR": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/CIDR"
    },
    "MaxAllowedPaymentAmount": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/MaxAllowedPaymentAmount"
    },
    "OrganizationFiscalCode": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/OrganizationFiscalCode"
    },
    "ExtendedProfile": {
      "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/ExtendedProfile"
    },
    "Logo": {
      "type": "object",
      "properties": {
        "logo": {
          "type": "string",
          "format": "byte",
          "minLength": 1
        }
      },
      "required": ["logo"]
    }
  },
  "responses": {},
  "parameters": {
    "SandboxFiscalCode": {
      "name": "fiscal_code",
      "in": "path",
      "type": "string",
      "maxLength": 16,
      "minLength": 16,
      "required": true,
      "description": "The sandbox fiscal code of the user, all upper case.",
      "pattern": "[A-Z]{6}[0-9]{2}A[0-9]{2}Y[0-9]{3}X",
      "x-example": "SPNDNL80A13Y555X"
    }
  },
  "tags": []
}
