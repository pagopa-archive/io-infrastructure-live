{
    "swagger": "2.0",
    "info": {
        "title": "${display_name}",
        "version": "1.0",
        "description": "\n# Warning\n\n  **This is an experimental API that is (most probably)\n  going to change as we evolve the IO platform.**\n\n# Introduction\nThis is the documentation of the IO API for 3rd party services. This API enables Public Administration services to integrate with the IO platform. IO enables services to communicate with Italian citizens via the [IO app](https://io.italia.it/).\n# How to get an API key\nTo get access to this API, you'll need to register on the [IO Developer Portal](https://developer.io.italia.it/).\nAfter the registration step, you have to click on the button that says `subscribe to the digital citizenship api` to receive the API key that you will use to authenticate the API calls.\nYou will also receive an email with further instructions, including a fake Fiscal Code that you will be able to use to send test messages. Messages sent to the fake Fiscal Code will be notified to the email address used during the registration process on the developer portal.\n# Messages\n## What is a message\nMessages are the primary form of communication enabled by the IO APIs. Messages are **personal** communications directed to a **specific citizen**. You will not be able to use this API to broadcast a message to a group of citizens, you will have to create and send a specific, personalized message to each citizen you want to communicate to.\nThe recipient of the message (i.e. a citizen) is identified trough his [Fiscal Code](https://it.wikipedia.org/wiki/Codice_fiscale).\n## Message format\nA message is conceptually very similar to an email and, in its simplest form, is composed of the following attributes:\n\n  * A required `subject`: a short description of the topic.\n  * A required `markdown` body: a Markdown representation of the body (see\n    below on what Markdown tags are allowed).\n  * An optional `payment_data`: in case the message is a payment request,\n    the _payment data_ will enable the recipient to pay the requested amount\n    via [PagoPA](https://www.agid.gov.it/it/piattaforme/pagopa).\n  * An optional `due_date`: a _due date_ that let the recipient\n    add a reminder when receiving the message. The format for all\n    dates is [ISO8601](https://it.wikipedia.org/wiki/ISO_8601) with time\n    information and UTC timezone (ie. \"2018-10-13T00:00:00.000Z\").\n\n## Allowed Markdown formatting\nNot all Markdown formatting is currently available. Currently you can use the following formatting:\n\n  * Headings\n  * Text stylings (bold, italic, etc...)\n  * Lists (bullet and numbered)\n\n## Process for sending a message to a citizen\nNot every citizen will be interested in what you have to say and not every citizen you want to communicate to will be registered on IO. For this reason, before sending a message you need to check whether the recipient is registered on the platform and that he has not yet opted out from receiving messages from you.\nThe process for sending a message is made of 3 steps:\n\n  1. Call [getProfile](#operation/getProfile): if the profile does not exist\n     (i.e. you get a 404 response) or if the recipient has opted-out from\n     your service (the response contains `sender_allowed: false`), you\n     cannot send the message and you must stop here.\n  1. Call [submitMessageforUser](#operation/submitMessageforUser) to submit\n     a new message.\n  1. (optional) Call [getMessage](#operation/getMessage) to check whether\n     the message has been notified to the recipient.\n"
    },
    "host": "${host}",
    "basePath": "/${path}",
    "schemes": [
        "https"
    ],
    "securityDefinitions": {
        "apiKeyHeader": {
            "type": "apiKey",
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header"
        },
        "apiKeyQuery": {
            "type": "apiKey",
            "name": "subscription-key",
            "in": "query"
        }
    },
    "security": [
        {
            "apiKeyHeader": []
        },
        {
            "apiKeyQuery": []
        }
    ],
    "paths": {
        "/subscriptions-feed/{date}": {
            "get": {
                "description": "Returns the hashed fiscal codes of users that subscribed to or\nunsubscribed from your service on the provided date (UTC). By querying\nthis feed on each day, you can know what users you can or cannot send\nmessages to without having to query `getProfile` for each message.\nThis is an optimization for services that send hi volumes of\nmessages per day to avoid having to make two API calls for each message.",
                "operationId": "getsubscriptionsfeedfordate",
                "summary": "Get your service subscriptions feed for a date",
                "parameters": [
                    {
                        "name": "date",
                        "in": "path",
                        "description": "A date in the format YYYY-MM-DD.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found.",
                        "schema": {
                            "$ref": "#/definitions/SubscriptionsFeed"
                        },
                        "examples": {
                            "application/json": {
                                "dateUTC": "2019-09-03",
                                "subscriptions": [
                                    "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
                                ],
                                "ubsubscriptions": []
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Subscriptions feed not available yet.",
                        "schema": {
                            "$ref": "#/definitions/ProblemJson"
                        }
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/messages/{fiscal_code}": {
            "post": {
                "description": "Submits a message to a user.\nOn error, the reason is returned in the response payload.\nIn order to call `submitMessageforUser`, before sending any message,\nthe sender MUST call `getProfile` and check that the profile exists\n(for the specified fiscal code) and that the `sender_allowed` field\nof the user's profile it set to `true`.",
                "operationId": "submitMessageforUser",
                "summary": "Submit a message",
                "parameters": [
                    {
                        "name": "fiscal_code",
                        "in": "path",
                        "description": "The fiscal code of the user, all upper case.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "newMessage",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/NewMessage"
                        }
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "description": "Message created.",
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "Location (URL) of created message resource.\nA GET request to this URL returns the message status and details."
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/MessagesFiscal_codePost201ApplicationJsonResponse"
                        },
                        "examples": {
                            "application/json": {
                                "id": "01BX9NSMKVXXS5PSP2FATZMYYY"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload.",
                        "schema": {
                            "$ref": "#/definitions/ProblemJson"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Too many requests"
                    },
                    "500": {
                        "description": "The message cannot be delivered.",
                        "schema": {
                            "$ref": "#/definitions/ProblemJson"
                        }
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/messages/{fiscal_code}/{id}": {
            "get": {
                "description": "The previously created message with the provided message ID is\nreturned.",
                "operationId": "getMessage",
                "summary": "Get Message",
                "parameters": [
                    {
                        "name": "fiscal_code",
                        "in": "path",
                        "description": "The fiscal code of the user, all upper case.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The ID of the message.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message found.",
                        "schema": {
                            "$ref": "#/definitions/MessageResponseWithContent"
                        },
                        "examples": {
                            "application/json": {
                                "message": {
                                    "id": "01BX9NSMKAAAS5PSP2FATZM6BQ",
                                    "fiscal_code": "QXJNTX9RCRVD6V4O",
                                    "time_to_live": 3600,
                                    "content": {
                                        "subject": "message subject, aliquip sint nulla in estinut",
                                        "markdown": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas et mollis felis.\nVivamus orci nisl, commodo ut sodales ut, eleifend a libero. Donec dapibus, turpis in mattis tempor,\nrisus nunc malesuada ex, non aliquet metus nunc a lacus. Aenean in arcu vitae nisl porta\nfermentum nec non nibh. Phasellus tortor tellus, semper in metus eget, eleifend\nlaoreet nibh. Aenean feugiat lectus ut nisl eleifend gravida."
                                    },
                                    "sender_service_id": "01BX9NSMKVXXS5PSP2FATZM6QX"
                                },
                                "notification": {
                                    "email": "QUEUED"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No message found for the provided ID.",
                        "schema": {
                            "$ref": "#/definitions/ProblemJson"
                        }
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/profiles/{fiscal_code}": {
            "get": {
                "description": "Returns the preferences for the user identified by the provided\nfiscal code. The field `sender_allowed` is set fo `false` in case\nthe service which is calling the API has been disabled by the user.",
                "operationId": "getProfile",
                "summary": "Get a User Profile",
                "parameters": [
                    {
                        "name": "fiscal_code",
                        "in": "path",
                        "description": "The fiscal code of the user, all upper case.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Found.",
                        "schema": {
                            "$ref": "#/definitions/LimitedProfile"
                        },
                        "examples": {
                            "application/json": {
                                "email": "foobar@example.com",
                                "version": 1
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No user found for the provided fiscal code.",
                        "schema": {
                            "$ref": "#/definitions/ProblemJson"
                        }
                    },
                    "429": {
                        "description": "Too many requests"
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        }
    },
    "definitions": {
        "SubscriptionsFeed": {
            "type": "object",
            "properties": {
                "dateUTC": {
                    "$ref": "#/definitions/DateUTC"
                },
                "subscriptions": {
                    "$ref": "#/definitions/SubscriptionsList"
                },
                "unsubscriptions": {
                    "$ref": "#/definitions/SubscriptionsList"
                }
            },
            "required": [
                "dateUTC",
                "subscriptions",
                "unsubscriptions"
            ]
        },
        "SubscriptionsList": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/FiscalCodeHash"
            }
        },
        "FiscalCodeHash": {
            "type": "string",
            "maxLength": 16,
            "minLength": 16,
            "description": "To avoid sharing the citizens fiscal codes, the API will\nprovide the hex encoding of the SHA256 hash of the upper case fiscal code.",
            "pattern": "[0-9a-f]{64}",
            "x-example": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "DateUTC": {
            "type": "string",
            "maxLength": 10,
            "minLength": 10,
            "description": "A date in the format YYYY-MM-DD.",
            "pattern": "[0-9]{4}-[0-9]{2}-[0-9]{2}",
            "x-example": "2019-09-15T00:00:00Z"
        },
        "ProblemJson": {
            "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/ProblemJson"
        },
        "NotificationChannelStatusValue": {
            "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/NotificationChannelStatusValue"
        },
        "MessageResponseWithContent": {
            "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/MessageResponseWithContent"
        },
        "FiscalCode": {
            "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/FiscalCode"
        },
        "LimitedProfile": {
            "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/LimitedProfile"
        },
        "Timestamp": {
            "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/Timestamp"
        },
        "TimeToLiveSeconds": {
            "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/TimeToLiveSeconds"
        },
        "MessageContent": {
            "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/MessageContent"
        },
        "NewMessage": {
            "$ref": "https://raw.githubusercontent.com/teamdigitale/io-functions-commons/master/openapi/definitions.yaml#/NewMessage"
        },
        "MessagesFiscal_codePost201ApplicationJsonResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The identifier of the created message."
                }
            }
        }
    },
    "tags": []
}
